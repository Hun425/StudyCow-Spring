USE STUDY_COW;

DROP TABLE IF EXISTS `T_USER`;
CREATE TABLE `T_USER` (
	`USER_ID`		INT	PRIMARY KEY auto_increment,
    `USER_NICKNAME` VARCHAR(20) NOT NULL UNIQUE,
	`USER_NAME`		VARCHAR(20)	NOT NULL,
	`USER_EMAIL`	VARCHAR(30)	NOT NULL,
	`USER_PASSWORD`	VARCHAR(200) NOT NULL,
    `USER_BIRTHDAY` DATE NOT NULL,
	`USER_PUBLIC`	TINYINT	NOT NULL DEFAULT 0,
	`USER_THUMB`	VARCHAR(100) NULL,
	`GRADE_CODE`	TINYINT	NOT NULL DEFAULT 0,
	`USER_EXP`		INT	NOT NULL DEFAULT 0,
	`USER_JOIN_DATE`	TIMESTAMP	NOT NULL DEFAULT NOW(),
	`USER_UPDATE_DATE`	TIMESTAMP	NOT NULL DEFAULT NOW(),
    foreign key (GRADE_CODE) references T_GRADE_CODE(GRADE_CODE),
    INDEX IDX_USER_EMAIL (USER_EMAIL)
);

-- ALTER TABLE T_USER ADD COLUMN `USER_NICKNAME` VARCHAR(20) NOT NULL UNIQUE;
-- ALTER TABLE T_USER ADD COLUMN `USER_BIRTHDAY` DATE NOT NULL;
-- CREATE INDEX IDX_USER_NICKNAME ON T_USER(USER_NICKNAME);
-- ALTER TABLE T_USER DROP INDEX IDX_USER_NAME;

DROP TABLE IF EXISTS `T_SUBJECT_CODE`;
CREATE TABLE `T_SUBJECT_CODE` (
	`SUB_CODE`	TINYINT	PRIMARY KEY auto_increment,
	`SUB_NAME`	VARCHAR(20)	NULL
);

-- ALTER TABLE T_SUBJECT_CODE ADD COLUMN `SUB_MAX_SCORE` INT NOT NULL;
-- ALTER TABLE T_SUBJECT_CODE ADD COLUMN `SUB_STATUS` TINYINT NOT NULL;
-- ALTER TABLE T_SUBJECT_CODE ADD COLUMN `SUB_IN_DATE` TIMESTAMP NOT NULL DEFAULT NOW();

DROP TABLE IF EXISTS `T_CATEGORY`;
CREATE TABLE `T_CATEGORY` (
	`CAT_CODE`	TINYINT	PRIMARY KEY auto_increment,
	`SUB_CODE`	TINYINT	NOT NULL,
	`CAT_NAME`	VARCHAR(30),
	`CAT_STATUS`	TINYINT	NOT NULL DEFAULT 0,
	`CAT_IN_DATE`	TIMESTAMP NOT NULL DEFAULT NOW(),
    FOREIGN KEY (SUB_CODE) references T_SUBJECT_CODE(SUB_CODE)
);

DROP TABLE IF EXISTS `T_SCORE`;
CREATE TABLE `T_SCORE` (
	`SCORE_ID`	INT	PRIMARY KEY auto_increment,
	`USER_ID`	INT	NOT NULL,
	`SUB_CODE`	TINYINT	NOT NULL,
	`TEST_DATE`	DATE NOT NULL,
	`TEST_SCORE`	TINYINT	NOT NULL DEFAULT 0,
	`TEST_GRADE`	TINYINT NULL,
	`SCORE_UPDATE_DATE`	TIMESTAMP NOT NULL,
    FOREIGN KEY (USER_ID) references T_USER(USER_ID),
    FOREIGN KEY (SUB_CODE) references T_SUBJECT_CODE(SUB_CODE),
    INDEX IDX_USER_ID (USER_ID),
    INDEX IDX_TEST_DATE (TEST_DATE),
    INDEX IDX_SUB_CODE (SUB_CODE)
);

DROP TABLE IF EXISTS `T_WRONG_DETAIL`;
CREATE TABLE `T_WRONG_DETAIL` (
	`WRONG_DETAIL_ID`	INT	PRIMARY KEY auto_increment,
	`SCORE_ID`	INT	NOT NULL,
	`CAT_CODE`	TINYINT	NOT NULL,
	`WRONG_CNT`	TINYINT	NOT NULL DEFAULT 0,
    FOREIGN KEY (SCORE_ID) references T_SCORE(SCORE_ID),
    FOREIGN KEY (CAT_CODE) references T_CATEGORY(CAT_CODE),
    INDEX IDX_SCORE_ID (SCORE_ID)
);

DROP TABLE IF EXISTS `T_GRADE_CODE`;
CREATE TABLE `T_GRADE_CODE` (
	`GRADE_CODE`	TINYINT	PRIMARY KEY auto_increment,
	`GRADE_NAME`	VARCHAR(10)	NOT NULL,
	`MIN_EXP`	INT	NOT NULL,
	`MAX_EXP`	INT	NOT NULL
);

DROP TABLE IF EXISTS `T_USER_TOKEN`;
CREATE TABLE `T_USER_TOKEN` (
	`USER_ID`	INT PRIMARY KEY,
	`REFRESH_TOKEN`	VARCHAR(1000)	NULL,
	`END_DATE`	TIMESTAMP	NULL,
	`IN_DATE`	TIMESTAMP	NULL,
    foreign key (USER_ID) references T_USER(USER_ID)
);

DROP TABLE IF EXISTS `T_PLAN`;
CREATE TABLE `T_PLAN` (
	`PLAN_ID`	INT	PRIMARY KEY auto_increment,
	`USER_ID`	INT	NOT NULL,
	`SUB_CODE`	TINYINT	NOT NULL,
	`PLAN_DATE`	DATE	NOT NULL,
	`PLAN_CONTENT`	TEXT	NULL,
	`PLAN_STUDY_TIME`	INT	NOT NULL DEFAULT 0,
	`PLAN_IN_DATE`	TIMESTAMP	NOT NULL DEFAULT NOW(),
	`PLAN_STATUS`	TINYINT	NOT NULL DEFAULT 0,
	`PLAN_UPDATE_DATE`	TIMESTAMP NOT NULL DEFAULT NOW(),
	`PLAN_SUM_TIME`	INT	NOT NULL DEFAULT 0,
    foreign key (USER_ID) references T_USER(USER_ID),
    foreign key (SUB_CODE) references T_SUBJECT_CODE(SUB_CODE),
    INDEX IDX_USER_ID (USER_ID),
    INDEX IDX_PLAN_DATE (PLAN_DATE),
    INDEX IDX_SUB_CODE (SUB_CODE)
);

DROP TABLE IF EXISTS `T_EXP_LOG`;
CREATE TABLE `T_EXP_LOG` (
	`EXP_ID`	BIGINT PRIMARY KEY auto_increment,
	`USER_ID`	INT	NOT NULL,
	`GET_AMOUNT`	INT	NOT NULL,
	`GET_DATE`	TIMESTAMP	NOT NULL,
	foreign key (USER_ID) references T_USER(USER_ID),
    INDEX IDX_USER_ID (USER_ID)
);

DROP TABLE IF EXISTS `T_ROOM`;
CREATE TABLE `T_ROOM` (
	`ROOM_ID`	BIGINT	PRIMARY KEY auto_increment,
	`USER_ID`	INT	NOT NULL,
	`ROOM_TITLE`	VARCHAR(50)	NOT NULL,
	`ROOM_MAX_PERSON`	TINYINT	NOT NULL,
	`ROOM_NOW_PERSON`	TINYINT	NOT NULL,
	`ROOM_CREATE_DATE`	DATE	NOT NULL,
	`ROOM_END_DATE`	DATE	NOT NULL,
	`ROOM_STATUS`	TINYINT	NOT NULL DEFAULT 0,
	`ROOM_UPDATE_DATE`	TIMESTAMP	NOT NULL,
	`ROOM_CONTENT`	VARCHAR(2000)	NULL,
    FOREIGN KEY (USER_ID) REFERENCES T_USER(USER_ID),
    INDEX IDX_ROOM_TITLE (ROOM_TITLE),
    INDEX IDX_ROOM_STATUS (ROOM_STATUS)
);

DROP TABLE IF EXISTS `T_CHAT_LOG`;
CREATE TABLE `T_CHAT_LOG` (
	`CHAT_ID`	BIGINT	PRIMARY KEY auto_increment,
	`ROOM_ID`	BIGINT	NOT NULL,
	`USER_ID`	INT	NOT NULL,
	`CHAT_CONTENT`	VARCHAR(200) NOT NULL,
	`CHAT_IN_DATE`	TIMESTAMP NOT NULL,
    FOREIGN KEY (ROOM_ID) REFERENCES T_ROOM(ROOM_ID),
    FOREIGN KEY (USER_ID) REFERENCES T_USER(USER_ID),
    INDEX IDX_ROOM_ID (ROOM_ID),
    INDEX IDX_CHAT_IN_DATE (CHAT_IN_DATE)
);

DROP TABLE IF EXISTS `T_ATTEND`;
CREATE TABLE `T_ATTEND` (
	`USER_ID`	INT	PRIMARY KEY,
	`ROOM_ID`	BIGINT	NOT NULL,
	foreign key (USER_ID) references T_USER(USER_ID),
    INDEX IDX_ROOM_ID (ROOM_ID)
);

-- ALTER TABLE T_ATTEND ADD CONSTRAINT foreign key (ROOM_ID) REFERENCES T_ROOM(ROOM_ID);

DROP TABLE IF EXISTS `T_FREIND_REQUEST`;
CREATE TABLE `T_FREIND_REQUEST` (
	`FREIND_REQUEST_ID`	BIGINT PRIMARY KEY auto_increment,
	`FROM_USER_ID`	INT	NOT NULL,
	`TO_USER_ID`	INT	NOT NULL,
	`REQUEST_STATUS`	TINYINT	NOT NULL DEFAULT 0,
	`REQUEST_DATE`	TIMESTAMP NOT NULL DEFAULT NOW(),
	`REQUEST_UPDATE_DATE`	TIMESTAMP	NOT NULL DEFAULT NOW(),
    FOREIGN KEY (FROM_USER_ID) REFERENCES T_USER(USER_ID),
    FOREIGN KEY (TO_USER_ID) REFERENCES T_USER(USER_ID)
);

DROP TABLE IF EXISTS `T_FREIND`;
CREATE TABLE `T_FREIND` (
	`USER_ID1`	INT	NOT NULL,
	`USER_ID2`	INT	NOT NULL,
	`FREIND_DATE`	TIMESTAMP	NOT NULL DEFAULT NOW(),
    PRIMARY KEY (USER_ID1, USER_ID2),
    FOREIGN KEY (USER_ID1) REFERENCES T_USER(USER_ID),
    FOREIGN KEY (USER_ID2) REFERENCES T_USER(USER_ID)
);

DROP TABLE IF EXISTS `T_BGM`;
CREATE TABLE `T_BGM` (
	`BGM_INDEX`	INT	NOT NULL,
	`ROOM_ID`	BIGINT	NOT NULL,
	`BGM_LINK`	VARCHAR(500)	NOT NULL,
	`BGM_IN_DATE`	TIMESTAMP	NOT NULL,
	`BGM_NAME`	VARCHAR(30)	NULL,
    FOREIGN KEY (ROOM_ID) REFERENCES T_ROOM(ROOM_ID),
    PRIMARY KEY (ROOM_ID, BGM_INDEX)
);

DROP TABLE IF EXISTS `T_IN_LOG`;
CREATE TABLE `T_IN_LOG` (
	`IN_LOG_ID`	BIGINT	PRIMARY KEY auto_increment,
	`ROOM_ID`	BIGINT	NOT NULL,
	`USER_ID`	INT	NOT NULL,
	`STUDY_TIME`	INT	NOT NULL DEFAULT 0,
	`STUDY_DATE`	DATE	NOT NULL,
	`IN_DATE`	TIMESTAMP	NOT NULL,
	`OUT_DATE`	TIMESTAMP	NULL,
    FOREIGN KEY (USER_ID) REFERENCES T_USER(USER_ID),
    FOREIGN KEY (ROOM_ID) REFERENCES T_ROOM(ROOM_ID)
);

DROP TABLE IF EXISTS `T_PROC_USER_STUDY`;
CREATE TABLE `T_PROC_USER_STUDY` (
	`PROC_USER_ID`	BIGINT	PRIMARY KEY auto_increment,
	`USER_ID`	INT	NOT NULL,
	`PROC_DATE`	DATE	NOT NULL,
	`SUM_STUDY_TIME`	INT	NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES T_USER(USER_ID),
    INDEX IDX_PROC_DATE (PROC_DATE)
);

DROP TABLE IF EXISTS `T_PROC_ROOM_STUDY`;
CREATE TABLE `T_PROC_ROOM_STUDY` (
	`PROC_ROOM_ID`	BIGINT	PRIMARY KEY auto_increment,
	`ROOM_ID`	BIGINT	NOT NULL,
	`PROC_DATE`	DATE	NOT NULL,
	`SUM_ROOM_TIME`	INT	NOT NULL,
    FOREIGN KEY (ROOM_ID) REFERENCES T_ROOM(ROOM_ID),
    INDEX IDX_PROC_DATE (PROC_DATE)
);